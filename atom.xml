<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sany&#39;s Blog</title>
  
  <subtitle>Getting Better Each Day!!!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://san-y.github.io/"/>
  <updated>2018-10-10T03:50:32.719Z</updated>
  <id>http://san-y.github.io/</id>
  
  <author>
    <name>Sany</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 磁盘文件清理</title>
    <link href="http://san-y.github.io/Linux%20%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E6%B8%85%E7%90%86/"/>
    <id>http://san-y.github.io/Linux 磁盘文件清理/</id>
    <published>2018-10-09T09:11:04.000Z</published>
    <updated>2018-10-10T03:50:32.719Z</updated>
    
    <content type="html"><![CDATA[<p>由于linux 的根目录挂在的大小只有50G，CDH的环境又安装在/opt目录下，导致/目录的可用空间总是岌岌可危。经常面临需要清理硬盘的情况。<br>期间产生了一下问题，故作此记录！<br><img src="https://betanews.com/wp-content/uploads/2018/08/chromebook-linux.jpg" alt="此处输入图片的描述"></p><ol><li><p>确认磁盘可用空间</p><blockquote><p>查看磁盘信息：</p> <figure class="highlight plain"><figcaption><span>/]# df -lh```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   可以查看各文件系统（磁盘）下的挂载点的容量使用情况。</span><br><span class="line"></span><br><span class="line">2. 查看各文件夹大小及定位大文件</span><br><span class="line">   &gt; 进入根目录</span><br><span class="line">   ```[root@master /]# cd /</span><br></pre></td></tr></table></figure></blockquote><p>查看当前目录各文件夹占用空间大小</p><figure class="highlight plain"><figcaption><span>/]# du -h --max-depth</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--max-depth=N选项:显示当前目录总计（于--all一起使用时计算文件数），当N为指定数值时计算深度为N，此处我们使用的是1，所以只计算当前目录文件夹。</span><br><span class="line"></span><br><span class="line">执行如上两个命令后将可以看到/目录下各文件夹占用空间大小，如法炮制，将很快能定位到可以清理的文件目录。</span><br><span class="line"></span><br><span class="line">&gt; 查看当前目录最大文件并从大到小展现：</span><br><span class="line">```[root@master /]# ls -lhS</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>删除可清理的文件，如日志等<br>注：在生产环境种如果需要删除日志，最好先提前确认日志是否需要需要下载下来供开发人员分析。</p><blockquote><p>删除文件可清理的无用文件:</p><pre><code><figure class="highlight plain"><figcaption><span>/]# rm -rf 111.log```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在某些情况下，删除文件后再使用`df -lh`查看磁盘空间，发现磁盘空间并没有变化。是因为在在Linux或者Unix系统中，通过rm或者文件管理器删除文件将会从文件系统的目录结构上解除链接(unlink).然而如果文件是被打开的（有一个进程正在使用），那么进程将仍然可以读取该文件，磁盘空间也一直被占用。</span><br><span class="line">也就是说，虽然日志文件虽然被手动删除，但是并未被释放，进程还是在后台读取着该文件。这时如需彻底删除此文件则需找到对应的使用它的执行进程。</span><br><span class="line">&gt; 确认删除文件是否被进程占用(被删除的文件将会被标注为deleted)</span><br><span class="line">```[root@master /]# lsof | grep deleted</span><br></pre></td></tr></table></figure></code></pre></blockquote><p>找到对应的被删除文件的占用线程并kill掉<br><code>[root@master /]# kill -9 ***</code></p><p>再次查看磁盘空间，磁盘空间被成功释放。<br><strong>注意：kill 掉的进程（应用）也会被一起终止，如果应用需要继续执行，将需要被重启。</strong></p></li><li><p>最简单的不用重启应用请用日志文件的方式<br> 用覆盖当前日志文件的方式</p><pre><code>`[root@master /]# &gt; file.log``[root@master /]# echo &apos;&apos; &gt; file.log``[root@master /]# cat /dev/null &gt; file.log`</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于linux 的根目录挂在的大小只有50G，CDH的环境又安装在/opt目录下，导致/目录的可用空间总是岌岌可危。经常面临需要清理硬盘的情况。&lt;br&gt;期间产生了一下问题，故作此记录！&lt;br&gt;&lt;img src=&quot;https://betanews.com/wp-content
      
    
    </summary>
    
      <category term="技术" scheme="http://san-y.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="LINUX" scheme="http://san-y.github.io/categories/%E6%8A%80%E6%9C%AF/LINUX/"/>
    
    
      <category term="linux" scheme="http://san-y.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>异常【JAVA学习笔记】</title>
    <link href="http://san-y.github.io/%E5%BC%82%E5%B8%B8%E3%80%90JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91/"/>
    <id>http://san-y.github.io/异常【JAVA学习笔记】/</id>
    <published>2018-10-09T09:11:04.000Z</published>
    <updated>2018-10-10T03:50:32.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><pre><code>在JAVA中用类的形式对不正常情况进行了描述和封装对象。描述不正常的类，称为异常类。以前正常流程代码和问题代码处理相结合，现在将正常流程代码和问题处理代码分离，提高阅读性。其实异常就是java通过面向对象的思想将代码遇到的问题封装成了对象，用异常类对其进行描述。Java 中的异常都是基于 C++ 基础之上的。并非所有异常都定义在 java.lang 包中的。</code></pre><hr><h2 id="二、异常体系"><a href="#二、异常体系" class="headerlink" title="二、异常体系"></a>二、异常体系</h2><pre><code>问题很多，意味着描述的类也很多将其共性进行向上抽取，形成了异常体系：</code></pre><p><img src="https://static001.geekbang.org/resource/image/ac/00/accba531a365e6ae39614ebfa3273900.png" alt="java异常体系"><br>        <strong>注意：异常和错误的区别：异常能被程序本身可以处理，错误是无法处理。</strong></p><ul><li><p>Throwable</p><blockquote></blockquote><p> Throwable是 Java 语言中所有错误或异常的超类。<br>　　Throwable包含两个子类: Error 和 Exception。它们通常用于指示发生了异常情况。<br>　　Throwable包含了其线程创建时线程执行堆栈的快照，它提供了printStackTrace()等接口用于获取堆栈跟踪数据等信息。<br>　　在 Throwable 中只有三个基本的异常类提供了带 cause 参数的构造器，分别是 Exception、Error、RuntimeException，如果要链接其他类型的异常类，应该使用 initCause() 方法。</p></li><li><p>Error(它们在应用程序的控制和处理能力之外)</p><blockquote></blockquote><p>　  它用于指示合理的应用程序不应该试图捕获的严重问题，大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。<br>　　这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。<br>　　它用于表示编译时和系统错误（除非特殊情况，一般不用关心？）——《Java 编程思想》<br>　　和RuntimeException一样，编译器也不会检查Error。</p></li><li><p>Exception(是所有基本异常的基类)</p><blockquote></blockquote><p>　  Exception 是程序正常运行中，可以预料的意外情况，可以预料的意外情况，可能并且应该被捕获，进行相应处理。<br>　  Exception又分为可检查（checked)异常和不可检查（unchecked)异常，<strong>可检查异常在源代码里必须显式地进行捕获处理，这是编译器检查的一部分。</strong><br>　  自定义异常是 checked Exception。</p></li><li><p>RuntimeException（不检查（unchecked)异常）</p><blockquote></blockquote><p>　　是 Exception 子类，但属于 unchecked excepiton。RuntimeException 类及其子类表示“JVM 常用操作”引发的错误，即那些可能在 Java 虚拟机正常运行期间抛出的异常。编译器不会检查RuntimeException异常。通常是可以编码避免的逻辑错误，具体根据需要来判断是否需要捕获，并不会在编译期强制要求。<br>　　eg:<br>　　若试图使用空值对象引用、除数为零或数组越界，则分别引发运行时异常（NullPointerException、ArithmeticException）和 ArrayIndexOutOfBoundException。RuntimeException是ArithmeticException的超类。当代码发生除数为零的情况时，倘若既”没有通过throws声明抛出ArithmeticException异常”，也”没有通过try…catch…处理该异常”，也能通过编译。这就是我们所说的”编译器不会检查RuntimeException异常”！<br>　　如果代码会产生RuntimeException异常，则需要通过修改代码进行避免。例如，若会发生除数为零的情况，则需要通过代码避免该情况的发生！</p></li></ul><p><strong>Java将可抛出(Throwable)的结构分为三种类型：被检查的异常(Checked Exception)，不可查异常(unchecked Exception)。其中不可查异常又分为运行时异常(RuntimeException 及其子类)和错误(Error).</strong></p><hr><h2 id="三、异常的处理"><a href="#三、异常的处理" class="headerlink" title="三、异常的处理"></a>三、异常的处理</h2><p>try-catch用来处理异常，throws用来抛出异常。</p><ol><li><p>Throws抛出原理<br>如果让一个类称为异常类，必须要继承异常体系，因为只有称为异常体系的子类才有资格具备可抛性。才可以被两个关键词操作，throws  ,throw。<br> <strong>throws和throw的区别：</strong></p><ul><li>throws用在函数上（在函数上用throws对该类进行声明，以便于调用者对该问题预先的定义处理方式，throw用在函数内。</li><li>throws抛出的是异常类，可以抛出多个，用逗号隔开。throw抛出的是异常对象。</li></ul></li><li><p>Try-Catch捕获形式<br>这是可以对异常进行针对性处理的方式。</p><ul><li>try{//需要被检测异常的代码}</li><li>catch(异常类 变量){//处理异常的代码}<br>  一个捕捉当中存在几个catch情况:如果存在父类catch情况，一定要把父类catch放在catch语句的最后面。</li><li><p>finally{//一定会被执行的代码}<br>通常用于关闭（释放）资源。finally只要存在就会被执行，只有一种情况不会被执行，System.exit(0)关闭JVM。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">        try &#123;</span><br><span class="line">Scanner input = new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入除数：&quot;);</span><br><span class="line">int num1 = input.nextInt();</span><br><span class="line">System.out.println(&quot;请输入被除数：&quot;);</span><br><span class="line">int num2 = input.nextInt();</span><br><span class="line">int num = num1/num2;</span><br><span class="line">System.out.println(&quot;商是：&quot;+num);</span><br><span class="line">System.exit(1);//强制退出JVM进程</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;//Exception捕获异常的实例对象</span><br><span class="line">//e.printStackTrace(); 输出所有异常信息</span><br><span class="line">/*String mes = e.getMessage();//返回异常的错误信息,这种方法不常用</span><br><span class="line">System.err.println(mes);*/</span><br><span class="line">&#125;finally &#123;//finally块中代码始终会被执行</span><br><span class="line">System.out.println(&quot;感谢使用&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>try catch finally代码块儿组合特点:</p></li></ul><ol><li>try catch finally</li><li>try catch（多个）: catch和finally块为可选，但两者至少出现其中之一。当没有必要资源需要释放时，可以不用定义finally。</li><li>try finally ：异常无法直接catch处理，但是资源需要关闭。</li></ol><ul><li>发生异常的执行顺序：<blockquote></blockquote></li></ul><ol><li>执行try、catch块中return之前的语句</li><li>执行finally块中的语句</li><li>执行try、catch块中的return语句</li></ol><ul><li>扩展：随着 Java语言的发展，引入了一些更加便利的特性，比如try-with-resources 和 multiple catch，具体可以参考下面的代码段。在编译时期，会自动生成相应的处理逻辑，比如按照约定熟成close那些扩展了AutoCloseable或者Closeable的对象。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    try (BufferedReader br = new BufferedReader(…);</span><br><span class="line">     BufferedWriter writer = new BufferedWriter(…)) &#123;// Try-with-resources</span><br><span class="line">// do something</span><br><span class="line">catch ( IOException | XEception e) &#123;// Multiple catch</span><br><span class="line">   // Handle it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="四、异常处理的原则"><a href="#四、异常处理的原则" class="headerlink" title="四、异常处理的原则"></a>四、异常处理的原则</h2><ol><li>尽量不要使用类似Excption这样的通用异常，而是应该捕获特定异常。(方便查询问题，让代码直观的体现出尽量多的信息）</li><li>不要生吞（swallow）异常。如果我们不把异常抛出，或者也没有输出到日志（Logger)之类，程序可能在后续代码以不可控的方式结束，就很难判断哪里抛出了异常，及什么原因产生了异常。</li><li>尽量不要使用e.printStackTrace()的方式输出错误日志，看看printStackTrace()的文档，该方法的错误日志信息会以standard error stream的方式输出。问题就在这里，在稍微复杂一点的生产系统中，标准出错(STERR）不是个合适的输出选项，因为你很难判断日志到底输出到哪里去了。<strong>特别在分布式系统中，如果发生异常，但是无法找到堆栈轨迹（stacktrace),这纯属为诊断设置障碍。所以，最好使用产品日志，详细地输出到日志系统里。</strong></li><li><p>Throw early,catch late原则： 不要推诿或延迟处理异常，就地解决最好，并且需要实实在在的进行处理，而不是只捕捉，不动作。</p><ul><li>Throw early 尽早抛出异常：<br>eg:<figure class="highlight plain"><figcaption><span>void readPreferences(String fileName)&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> //...perform operations... </span><br><span class="line">InputStream in = new FileInputStream(fileName);</span><br><span class="line"> //...read the preferences file...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果 fileName 是 null，那么程序就会抛出 NullPointerException，但是由于没有第一时间暴露出问题，堆栈信息可能非常令人费解，往往需要相对复杂的定位。这个 NPE 只是作为例子，实际产品代码中，可能是各种情况，比如获取配置失败之类的。在发现问题的时候，第一时间抛出，能够更加清晰地反映问题。<br>我们可以修改一下，让问题“throw early”，对应的异常信息就非常直观了。</p><figure class="highlight plain"><figcaption><span>void readPreferences(String filename) &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Objects. requireNonNull(filename);</span><br><span class="line">//...perform other operations... </span><br><span class="line">InputStream in = new FileInputStream(filename);</span><br><span class="line"> //...read the preferences file...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>catch late<blockquote><p>至于“catch late”，其实是我们经常苦恼的问题，捕获异常后，需要怎么处理呢？最差的处理方式，就是我前面提到的“生吞异常”，本质上其实是掩盖问题。如果实在不知道如何处理，可以选择保留原有异常的cause 信息，直接再抛出或者构建新的异常抛出去。在更高层面，因为有了清晰的（业务）逻辑，往往会更清楚合适的处理方式是什么。<br> 有的时候，我们会根据需要自定义异常，这个时候除了保证提供足够的信息，还有两点需要考虑：</p><ul><li>是否需要定义成 Checked Exception，因为这种类型设计的初衷更是为了从异常情况恢复，作为异常设计者，我们往往有充足信息进行分类。</li><li>在保证诊断信息足够的同时，也要考虑避免包含敏感信息，因为那样可能导致潜在的安全问题。如果我们看 Java 的标准类库，你可能注意到类似 java.net.ConnectException，出错信息是类似“ Connection refused (Connection refused)”，而不包含具体的机器名、IP、端口等，一个重要考量就是信息安全。类似的情况在日志中也有，比如，用户数据一般是不可以输出到日志里面的。</li></ul></blockquote></li></ul><h2 id="五、异常性能开销"><a href="#五、异常性能开销" class="headerlink" title="五、异常性能开销"></a>五、异常性能开销</h2><p>我们从性能角度来审视一下 Java 的异常处理机制，这里有两个可能会相对昂贵的地方：</p><ul><li>try-catch 代码段会产生额外的性能开销，或者换个角度说，它往往会影响 JVM 对代码进行优化，所以建议仅捕获有必要的代码段，尽量不要一个大的 try 包住整段的代码；与此同时，利用异常控制代码流程，也不是一个好主意，远比我们通常意义上的条件语句（if/else、switch）要低效。</li><li>Java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作。如果发生的非常频繁，这个开销可就不能被忽略了。</li></ul><p>当我们的服务出现反应变慢、吞吐量下降的时候，检查发生最频繁的 Exception 也是一种思路。关于诊断后台变慢的问题，我会在后面的 Java 性能基础模块中系统探讨。</p><h2 id="六、常见面试问题"><a href="#六、常见面试问题" class="headerlink" title="六、常见面试问题"></a>六、常见面试问题</h2><ol><li>NoClassDefFoundError 和 ClassNotFoundException 有什么区别？<br>NoClassDefFoundError是一个错误(Error)，而ClassNOtFoundException是一个异常，在Java中对于错误和异常的处理是不同的，我们可以从异常中恢复程序但却不应该尝试从错误中恢复程序。<ul><li>ClassNotFoundException的产生原因：<br>Java支持使用Class.forName方法来动态地加载类，任意一个类的类名如果被作为参数传递给这个方法都将导致该类被加载到JVM内存中，如果这个类在类路径中没有被找到，那么此时就会在运行时抛出ClassNotFoundException异常。</li><li>NoClassDefFoundError产生的原因在于：<br>如果JVM或者ClassLoader实例尝试加载（可以通过正常的方法调用，也可能是使用new来创建新的对象）类的时候却找不到类的定义。要查找的类在编译的时候是存在的，运行的时候却找不到了。这个时候就会导致NoClassDefFoundError.<br>造成该问题的原因可能是打包过程漏掉了部分类，或者jar包出现损坏或者篡改。解决这个问题的办法是查找那些在开发期间存在于类路径下但在运行期间却不在类路径下的类。</li></ul></li><li>写出引起OutOfMemoryError和StackOverflowError的代码示例<br><a href="http://arthur503.github.io/blog/2013/10/10/Java-OutOfMemoryError-and-StackOverflowError.html" target="_blank" rel="noopener">OutOfMemoryError和StackOverflowError</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;在JAVA中用类的形式对不正常情况进行了描述和封装对象。描述不正常的类，称为异常类。以前正常流程代码和问题代
      
    
    </summary>
    
      <category term="技术" scheme="http://san-y.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="JAVA" scheme="http://san-y.github.io/categories/%E6%8A%80%E6%9C%AF/JAVA/"/>
    
    
      <category term="learn" scheme="http://san-y.github.io/tags/learn/"/>
    
      <category term="java" scheme="http://san-y.github.io/tags/java/"/>
    
      <category term="excption" scheme="http://san-y.github.io/tags/excption/"/>
    
  </entry>
  
  <entry>
    <title>testFile</title>
    <link href="http://san-y.github.io/testFile/"/>
    <id>http://san-y.github.io/testFile/</id>
    <published>2018-09-21T09:11:04.000Z</published>
    <updated>2018-09-21T09:54:23.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-引用块"><a href="#1-引用块" class="headerlink" title="1.引用块"></a>1.引用块</h2><ul><li><p>样例</p><ul><li><p>没有提供参数，则只输出普通的 blockquote</p><blockquote><p>content</p><footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote></li><li><p>引用书上的句子</p><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote></li><li><p>引用 Twitter</p><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote></li><li><p>引用网络上的文章</p><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></cite></footer></blockquote></li></ul></li><li><p>代码块</p><ul><li><p>在文章中插入代码。</p><p><strong>别名：</strong> :code</p><figure class="highlight plain"><figcaption><span>[title] [] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code snippet</span><br></pre></td></tr></table></figure></li><li><p>样例</p></li><li><p>普通的代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;Hello World!&apos;);</span><br></pre></td></tr></table></figure></li><li><p>指定语言</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String:args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"abc"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>附加说明</p><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure></li><li><p>附加说明和网址</p><figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>反引号代码块</p><p>  另一种形式的代码块，不同的是它使用三个反引号来包裹。</p><pre><code>class test {             public static void main(String:args) {                 System.out.println(&quot;abc&quot;);                 }             }</code></pre></li></ul><ul><li><p>Youtube<br>在文章中插入 Youtube 视频。</p><div class="video-container"><iframe src="//www.youtube.com/embed/PPMvvUEenUU" frameborder="0" allowfullscreen></iframe></div></li><li><p>Image<br>  在文章中插入指定大小的图片。</p>  <img class="[class names] images/head.jpg [width] [height] [title text [alt text]]"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-引用块&quot;&gt;&lt;a href=&quot;#1-引用块&quot; class=&quot;headerlink&quot; title=&quot;1.引用块&quot;&gt;&lt;/a&gt;1.引用块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;样例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;没有提供参数，则只输出普通的 blockquote&lt;/p&gt;

      
    
    </summary>
    
      <category term="life" scheme="http://san-y.github.io/categories/life/"/>
    
      <category term="test" scheme="http://san-y.github.io/categories/life/test/"/>
    
    
      <category term="test" scheme="http://san-y.github.io/tags/test/"/>
    
      <category term="file" scheme="http://san-y.github.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://san-y.github.io/hello-world/"/>
    <id>http://san-y.github.io/hello-world/</id>
    <published>2018-09-19T08:44:05.037Z</published>
    <updated>2018-09-19T08:44:05.038Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
